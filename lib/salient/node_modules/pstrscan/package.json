{
  "name": "pstrscan",
  "description": "A simple, fast string tokenizer for lexical scanning operations.",
  "version": "0.1.5",
  "keywords": [
    "regular",
    "expression",
    "tokenizer",
    "text",
    "string",
    "scanner"
  ],
  "main": "./lib/pstrscan.js",
  "homepage": "http://github.com/jhamlet/node-pstrscan",
  "directories": {
    "lib": "lib"
  },
  "dependencies": {
    "proteus": "0.1.x"
  },
  "devDependencies": {
    "mocha": "0.3.x",
    "should": "0.5.x"
  },
  "scripts": {
    "test": "mocha test/test-pstrscan.js"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/jhamlet/node-pstrscan/raw/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/jhamlet/node-pstrscan.git"
  },
  "preferGlobal": true,
  "contributors": [
    {
      "name": "Jerry Hamlet",
      "email": "jerry@hamletink.com",
      "url": "http://hamletink.com/"
    }
  ],
  "readme": "## PStringScanner\n\n### Overview\n\n**PStringScanner** is a simple string tokenizer that provides for lexical scanning operations on a string.\n\nIt's the _third_ port of the [Ruby  library](http://corelib.rubyonrails.org/classes/StringScanner.html) into JavaScript. However, where the other ports concentrated on the interface, this one concentrates on **speed**.\n\nThe original Ruby version was written in C, and is very fast. This version, while not in C, is as fast on short strings (under 32 Kb of characters), and almost **twice as fast** on large strings (million+ characters) than the other ports.\n\n### Installation\n\n~~~\nnpm install -g pstrscan\n~~~\n\n### Quick start\n\nScanning a string means keeping track of and advancing a position (a zero-based index into the source string) and matching regular expressions against the portion of the source string after the position.\n\n~~~js\nvar PStrScan = require(\"pstrscan\");\nvar s = new PStrScan(\"This is a test\");\ns.scan(/\\w+/);             // = \"This\"\ns.scan(/\\w+/);             // = null\ns.scan(/\\s+/);             // = \" \"\ns.scan(/\\s+/);             // = null\ns.scan(/\\w+/);             // = \"is\"\ns.hasTerminated();         // = false\ns.scan(/\\s+/);             // = \" \"\ns.scan(/(\\w+)\\s+(\\w+)/);   // = \"a test\"\ns.getMatch();              // = \"a test\"\ns.getCapture(1);           // = \"a\"\ns.getCapture(2);           // = \"test\"\ns.hasTerminated();         // = true\n~~~\n\n### Documentation\n\nThe [interface should be familiar](http://sstephenson.github.com/strscan-js/) to those familiar with the [original library](http://corelib.rubyonrails.org/classes/StringScanner.html), and the one originally ported to [JavaScript/Node](http://sstephenson.github.com/strscan-js/). There are some slight differences, but you should be able to gleam those from the [source file](https://github.com/jhamlet/node-pstrscan/blob/master/lib/pstrscan.js).\n\n### To Do\n\n1.  More documentation specific to this implementation.\n2.  Add a more comprehensive `unscan` history/capability.",
  "readmeFilename": "README.md",
  "_id": "pstrscan@0.1.5",
  "_from": "pstrscan@"
}
